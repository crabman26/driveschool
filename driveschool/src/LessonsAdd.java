import java.awt.Toolkit;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.Calendar;
import javax.swing.ComboBoxModel;
import net.proteanit.sql.DbUtils;


public class LessonsAdd extends javax.swing.JFrame 
{
    String str1,PEI1;
    SimpleDateFormat sd1;
    java.util.Date d1,date,d2;
    java.sql.Date sq1,sq2;
    boolean c1=false,c2=false,c3=false;
    String b,c,c11,c22,category33;
    private static LessonsAdd obj=null;
    
    private LessonsAdd() 
    {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(LessonsAdd.DO_NOTHING_ON_CLOSE);
        setIcon();
    }

    public static LessonsAdd getObj(){
        if(obj==null){
            obj=new LessonsAdd();
        }return obj;
    }
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Starting_Hour = new javax.swing.JTextField();
        Number = new javax.swing.JTextField();
        Insert = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        Finishing_Hour = new javax.swing.JTextField();
        Protocolle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        Practical = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Theoritical = new javax.swing.JRadioButton();
        Date = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        combobox = new javax.swing.JComboBox();
        category = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ΚΑΤΑΧΩΡΗΣΗ ΜΑΘΗΜΑΤΟΣ");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel9.setText("ΩΡΑ ΛΗΞΗΣ");

        jLabel5.setText("ΚΑΤΗΓΟΡΙΑ ΜΑΘΗΜΑΤΟΣ");

        Insert.setText("ΚΑΤΑΧΩΡΗΣΗ");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });

        jLabel3.setText("ΑΡΙΘΜΟΣ ΜΑΘΗΜΑΤΩΝ");

        jLabel2.setText("ΑΡΙΘΜΟΣ ΠΡΩΤΟΚΟΛΛΟΥ");

        jButton1.setText("ΚΑΘΑΡΙΣΜΟΣ ΠΕΔΙΩΝ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "45 λεπτά", "1:30", "2:15" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jLabel7.setText("ΗΜΕΡΟΜΗΝΙΑ");

        buttonGroup1.add(Practical);
        Practical.setText("Πρακτικό");
        Practical.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PracticalItemStateChanged(evt);
            }
        });

        jLabel1.setText("ΟΝΟΜΑΤΕΠΩΝΥΜΟ ΜΑΘΗΤΗ");

        jLabel8.setText("ΩΡΑ ΕΝΑΡΞΗΣ");

        buttonGroup1.add(Theoritical);
        Theoritical.setText("Θεωρητικό");
        Theoritical.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                TheoriticalItemStateChanged(evt);
            }
        });

        Date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateActionPerformed(evt);
            }
        });

        jLabel4.setText("ΚΑΤΗΓΟΡΙΑ ΟΧΗΜΑΤΟΣ");

        category.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Αυτοκίνητο", "Μοτοσυκλέτα ΑΜ", "Μοτοσυκλέτα Α1", "Μοτοσυκλέτα Α2", "Μοτοσυκλέτα Α", "Νταλίκα", "Λεωφορείο", "Φορτηγό" }));
        category.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoryItemStateChanged(evt);
            }
        });
        category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Protocolle, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Number, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Theoritical)
                            .addGap(18, 18, 18)
                            .addComponent(Practical))
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Starting_Hour)
                        .addComponent(Finishing_Hour))
                    .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(Starting_Hour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(Theoritical)
                    .addComponent(Practical))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Protocolle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Finishing_Hour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(Insert))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    

    
    
    
    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed

        if (c1==false&&c2==false){  String Message="Δεν έχετε επιλέξει τύπο μαθήματος";
            JOptionPane.showMessageDialog(null,Message);}
        if (c1==true) {
            
           

            try{
                Class.forName("org.sqlite.JDBC");
String sourceURL=new String("jdbc:sqlite:driveschool.sqlite");
                java.sql.Connection ConnectiondatabaseConnection = DriverManager.getConnection(sourceURL);
                

                try{

                    str1=Date.getText();
                    sd1=new SimpleDateFormat("yyyy-mm-dd");

                    java.util.Date d1 = sd1.parse(str1);
                    java.sql.Date sq1 = new Date(d1.getTime());
                    Object category1=combobox.getSelectedItem();
                    String fullname=String.valueOf(category1);
                    Object category2=category.getSelectedItem();
                    category33=String.valueOf(category2);
                    
                
                 Statement statement2=ConnectiondatabaseConnection.createStatement();

                String sql2="SELECT * FROM practical WHERE  `Ωρα_Έναρξης`='"+Starting_Hour.getText()+"' AND `Ωρα_Λήξης`='"+Finishing_Hour.getText()+"' AND  `Ημερομηνία_Πρακτικού`='"+Date.getText()+"' ";
                ResultSet result2=statement2.executeQuery(sql2);
                if(!result2.isBeforeFirst()){
                    String sql="INSERT INTO practical (`Ονοματεπώνυμο`,Αριθμός_Πρωτοκόλλου,Κατηγορία,Αριθμός_Μαθημάτων,Ημερομηνία_Πρακτικού,Ωρα_Έναρξης,Ωρα_Λήξης) VALUES (?,?,?,?,?,?,?)";
            PreparedStatement pst = ConnectiondatabaseConnection.prepareStatement(sql);
            pst.setString(1,fullname );
            pst.setString(2,Protocolle.getText() );
            pst.setString(3,category33 );
            pst.setString(4,Number.getText() );
            pst.setString(5,Date.getText() );
            pst.setString(6,Starting_Hour.getText() );
            pst.setString(7,Finishing_Hour.getText() );
            
            
           
            pst.execute();
            pst.close();
                    ConnectiondatabaseConnection.close();
                }if(result2.next())
                {
                    String Message="Δεν μπορείτε να εισαγετε μαθημα για την συγκεκριμένη ώρα";
                    JOptionPane.showMessageDialog(null,Message);
                }
                result2.close();
                }

                catch (ParseException e1)
                {
                    e1.printStackTrace();
                }

            }

            catch(ClassNotFoundException e1){
                System.out.println(e1);
            }
            catch(SQLException e2){
                System.out.println(e2);

            }
        }

        if (c2==true) {
            

            try{
              Class.forName("org.sqlite.JDBC");
               String sourceURL=new String("jdbc:sqlite:driveschool.sqlite");
                java.sql.Connection ConnectiondatabaseConnection = DriverManager.getConnection(sourceURL);
               
                

                try{

                    str1=Date.getText();
                    sd1=new SimpleDateFormat("yyyy-mm-dd");

                    java.util.Date d1 = sd1.parse(str1);
                    java.sql.Date sq1 = new Date(d1.getTime());
                    Object category1=combobox.getSelectedItem();
                    String fullname=String.valueOf(category1);
                    Object category2=category.getSelectedItem();
                    category33=String.valueOf(category2);
                   
                   
                    int aa;
                    switch(category33){
                        case("Αυτοκίνητο"):
                        aa=0;
                        PEI1=String.valueOf(aa);
                        break;
                        case("Μοτοσυκλέτα ΑΜ"):
                        aa=0;
                        PEI1=String.valueOf(aa);
                        break;
                        case("Μοτοσυκλέτα Α1"):
                        aa=0;
                        PEI1=String.valueOf(aa);
                        break;
                        case("Μοτοσυκλέτα Α2"):
                        aa=0;
                        PEI1=String.valueOf(aa);
                        break;
                        case("Μοτοσυκλέτα Α"):
                        aa=0;
                        PEI1=String.valueOf(aa);
                        break;

                    }
                    Statement statement=ConnectiondatabaseConnection.createStatement();

                String sql2="SELECT * FROM theoritical WHERE  `Ωρα_Έναρξης`='"+Starting_Hour.getText()+"' AND `Ώρα_Λήξης`='"+Finishing_Hour.getText()+"' AND  `Ημερομηνία_Θεωρητικού`='"+Date.getText()+"' ";
                ResultSet result2=statement.executeQuery(sql2);
                if (!result2.isBeforeFirst() ){
                    
                
 String sql="INSERT INTO theoritical (Ονοματεπώνυμο,Αριθμός_Πρωτοκόλλου,Κατηγορία,Αριθμός_Μαθημάτων,Ημερομηνία_Θεωρητικού,Ωρα_Έναρξης,Ώρα_Λήξης) VALUES (?,?,?,?,?,?,?)";
                 PreparedStatement pst = ConnectiondatabaseConnection.prepareStatement(sql);

            pst.setString(1,fullname );
            pst.setString(2,Protocolle.getText() );
            pst.setString(3,category33 );
            pst.setString(4,Number.getText() );
            pst.setString(5,Date.getText() );
            pst.setString(6,Starting_Hour.getText() );
            pst.setString(7,Finishing_Hour.getText() );
            
            
           
            pst.execute();
            pst.close();
                    
                    ConnectiondatabaseConnection.close();
                } if(result2.next())
                {
                    String Message="Δεν μπορείτε να εισαγετε μαθημα για την συγκεκριμένη ώρα";
                    JOptionPane.showMessageDialog(null,Message);
                }
                result2.close();
                }

                catch (ParseException e1)
                {
                    e1.printStackTrace();
                }

            }

            catch(ClassNotFoundException e1){
                System.out.println(e1);
            }
            catch(SQLException e2){
                System.out.println(e2);

            }
    }//GEN-LAST:event_InsertActionPerformed
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Date.setText("");
        Starting_Hour.setText("");
        Finishing_Hour.setText("");
        Protocolle.setText("");
        Number.setText("");
        category.setSelectedIndex(0);
        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        try {
            // TODO add your handling code here:
            Object a = jComboBox1.getSelectedItem();
            b=String.valueOf(a);
            switch (b) {
                case "45 λεπτά":
                c=Starting_Hour.getText();
                DateFormat sdf = new SimpleDateFormat("hh:mm:ss");
                java.util.Date date = sdf.parse(c);
                Calendar now = Calendar.getInstance();
                now.setTime(date);
                now.add(Calendar.MINUTE,45);
                String newtime=sdf.format(now.getTime());
                Finishing_Hour.setText(newtime);

                break;
                case "1:30":
                c11=Starting_Hour.getText();
                DateFormat sdf1 = new SimpleDateFormat("hh:mm:ss");
                java.util.Date date1 = sdf1.parse(c11);
                Calendar now1 = Calendar.getInstance();
                now1.setTime(date1);
                now1.add(Calendar.MINUTE,90);
                String newtime1=sdf1.format(now1.getTime());
                Finishing_Hour.setText(newtime1);
                break;
                case "2:15":
                c22=Starting_Hour.getText();
                DateFormat sdf2 = new SimpleDateFormat("hh:mm:ss");
                java.util.Date date2 = sdf2.parse(c22);
                Calendar now2 = Calendar.getInstance();
                now2.setTime(date2);
                now2.add(Calendar.MINUTE,135);
                String newtime2=sdf2.format(now2.getTime());
                Finishing_Hour.setText(newtime2);
                break;

            }
        } catch (ParseException ex) {
            Logger.getLogger(LessonsAdd.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void PracticalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PracticalItemStateChanged
        if  (evt.getSource()==Practical){
            c2=true;
            c2=false;
        }

        if(c1=true){
            
        }
    }//GEN-LAST:event_PracticalItemStateChanged

    private void TheoriticalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_TheoriticalItemStateChanged
        if  (evt.getSource()==Theoritical){
            c1=false;
            c2=true;
        }

        if(c2=true){
            
        }
    }//GEN-LAST:event_TheoriticalItemStateChanged

    private void DateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateActionPerformed

    private void categoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoryItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryItemStateChanged

    private void categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryActionPerformed
        Object category2=category.getSelectedItem();
        category33=String.valueOf(category2);
        if (c2==true){
            switch (category33){
                
            }
        }
    }//GEN-LAST:event_categoryActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
       
    int selectedOption = JOptionPane.showConfirmDialog(null, "Do you wanna close the window?", "Choose", 
                                  JOptionPane.YES_NO_OPTION); 
        if (selectedOption == JOptionPane.YES_OPTION) 
        {
            setVisible(false);
            dispose();
        }
        if (selectedOption == JOptionPane.NO_OPTION){
    
}
    }//GEN-LAST:event_formWindowClosing

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
               fillcombo();


    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LessonsAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LessonsAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LessonsAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LessonsAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LessonsAdd().setVisible(true);
            }
        });
    }
    private void setIcon() {
       setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("car.png")));
    }

private void fillcombo(){
    try{
        
         Class.forName("org.sqlite.JDBC");
String sourceURL=new String("jdbc:sqlite:driveschool.sqlite");
	java.sql.Connection ConnectiondatabaseConnection = DriverManager.getConnection(sourceURL);
	Statement statement=ConnectiondatabaseConnection.createStatement();

	String sql="SELECT * FROM students; ";
	ResultSet result=statement.executeQuery(sql);
        
        while(result.next()){
            String surname=result.getString("Επώνυμο");
            String name=result.getString("Όνομα");
            String fullname=name +" "+ surname;
            combobox.addItem(fullname);
        }
        
        
	ConnectiondatabaseConnection.close();
        
        
    }catch(Exception e1){
       System.out.println(e1); 
    };
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Date;
    private javax.swing.JTextField Finishing_Hour;
    private javax.swing.JButton Insert;
    private javax.swing.JTextField Number;
    private javax.swing.JRadioButton Practical;
    private javax.swing.JTextField Protocolle;
    private javax.swing.JTextField Starting_Hour;
    private javax.swing.JRadioButton Theoritical;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox category;
    private javax.swing.JComboBox combobox;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
