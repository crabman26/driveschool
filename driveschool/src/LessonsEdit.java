import java.awt.Toolkit;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

public class LessonsEdit extends javax.swing.JFrame {

     String str1,str2,str3,b,c,d,c11,c22,d11,d22,category,cat,pei,cat22,Table_click,Table_click2,Table_click3,Table_click4,Table_click5,Table_click6,Table_click7,Table_click8,fullname,res1,res2,res3,res4,res5,res6;
    Object a1,b1,cat2,cat222,f1;
    SimpleDateFormat sd1,sd2;
     java.util.Date d1,d2;
      java.sql.Date sq1,sq2;
      boolean c1=false,c2=false;
      ResultSet result;
      PreparedStatement pst;
     
      
      

   
    private static LessonsEdit obj=null;  
      
    private LessonsEdit() {
        initComponents();
        setResizable(false);
        fillcombo();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(LessonsEdit.DO_NOTHING_ON_CLOSE);
        setIcon();
    }

    
    public static LessonsEdit getObj(){
        if(obj==null){
            obj=new LessonsEdit();
        }return obj;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        Result = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Finishing_Hour = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        Starting_Hour = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Theoritical = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        Protocolle = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        Practical = new javax.swing.JRadioButton();
        Date2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        StartingHour2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Date = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        FinishingHour2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        combobox = new javax.swing.JComboBox();
        Category = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ΕΠΕΞΕΡΓΑΣΙΑ ΜΑΘΗΜΑΤΟΣ");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Result.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        Result.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResultMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Result);

        jButton3.setText("ΚΑΘΑΡΙΣΜΟΣ ΠΕΔΙΩΝ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("ΕΠΕΞΕΡΓΑΣΙΑ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("ΑΝΑΖΗΤΗΣΗ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Finishing_Hour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Finishing_HourActionPerformed(evt);
            }
        });

        jLabel11.setText("ΩΡΑ ΛΗΞΗΣ ΠΡΑΚΤΙΚΟΥ");

        Starting_Hour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Starting_HourActionPerformed(evt);
            }
        });

        jLabel10.setText("ΩΡΑ ΕΝΑΡΞΗΣ ΠΡΑΚΤΙΚΟΥ");

        jLabel8.setText("ΚΑΤΗΓΟΡΙΑ ΟΧΗΜΑΤΟΣ");

        buttonGroup1.add(Theoritical);
        Theoritical.setText("Θεωρητικά");
        Theoritical.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                TheoriticalItemStateChanged(evt);
            }
        });

        jLabel5.setText("ΑΡΙΘΜΟΣ ΠΡΩΤΟΚΟΛΟΥ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "45 λεπτά", "1:30", "2:15" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(Practical);
        Practical.setText("Πρακτικά");
        Practical.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PracticalItemStateChanged(evt);
            }
        });

        jLabel3.setText("ΗΜΕΡΟΜΗΝΙΑ ΘΕΩΡΗΤΙΚΟΥ");

        jLabel6.setText("ΩΡΑ ΕΝΑΡΞΗΣ ΘΕΩΡΗΤΙΚΟΥ ");

        jLabel2.setText("ΟΝΟΜΑΤΕΠΩΝΥΜΟ ΜΑΘΗΤΗ");

        jLabel9.setText("ΗΜΕΡΟΜΗΝΙΑ ΠΡΑΚΤΙΚΟΥ");

        jLabel7.setText("ΩΡΑ ΛΗΞΗΣ ΘΕΩΡΗΤΙΚΟΥ");

        FinishingHour2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinishingHour2ActionPerformed(evt);
            }
        });

        jLabel12.setText("ΚΑΤΗΓΟΡΙΑ ΜΑΘΗΜΑΤΟΣ");

        Category.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Αυτοκίνητο", "Μοτοσυκλέτα ΑΜ", "Μοτοσυκλέτα Α1", "Μοτοσυκλέτα Α2", "Μοτοσυκλέτα Α", "Νταλίκα", "Λεωφορείο", "Φορτηγό" }));
        Category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combobox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Date2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Protocolle, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(Theoritical)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Practical))
                                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(FinishingHour2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(StartingHour2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(Starting_Hour, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Category, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(Finishing_Hour, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(85, 85, 85)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(Category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(Finishing_Hour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(Protocolle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Date2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(StartingHour2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Starting_Hour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(Theoritical)
                            .addComponent(Practical))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(FinishingHour2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(jButton3)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResultMouseClicked
        try{
            int row=Result.getSelectedRow();
            Table_click=(Result.getModel().getValueAt(row,1).toString());
            Table_click2=(Result.getModel().getValueAt(row,3).toString());
            Table_click3=(Result.getModel().getValueAt(row,4).toString());
            Table_click4=(Result.getModel().getValueAt(row,7).toString());
            Table_click5=(Result.getModel().getValueAt(row,8).toString());
            Table_click6=(Result.getModel().getValueAt(row,5).toString());
            Table_click7=(Result.getModel().getValueAt(row,6).toString());
           

           
            

            Class.forName("org.sqlite.JDBC");
            String sourceURL=new String("jdbc:sqlite:driveschool.sqlite");
            java.sql.Connection ConnectiondatabaseConnection = DriverManager.getConnection(sourceURL);
            Statement statement=ConnectiondatabaseConnection.createStatement();

            String sql="SELECT theoritical.`Ονοματεπώνυμο`,theoritical.`Αριθμός_Πρωτοκόλλου`,theoritical.`Κατηγορία`,theoritical.`Ημερομηνία_Θεωρητικού`,theoritical.`Ωρα_Έναρξης`,theoritical.`Ώρα_Λήξης`,practical.`Ημερομηνία_Πρακτικού`,practical.`Ωρα_Έναρξης`,practical.`Ωρα_Λήξης` FROM theoritical INNER JOIN practical ON theoritical.`Αριθμός_Πρωτοκόλλου` =practical.`Αριθμός_Πρωτοκόλλου` WHERE theoritical.`Αριθμός_Πρωτοκόλλου`='"+Table_click+"' AND `Ημερομηνία_Θεωρητικού`='"+Table_click2+"' AND theoritical.`Ωρα_Έναρξης`='"+Table_click3+"'";
            ResultSet result=statement.executeQuery(sql);
            displayResults(result);
            result.close();
        } catch(ClassNotFoundException e1){
            System.out.println(e1);
        }
        catch(SQLException e2){
            System.out.println(e2);
            /**
            * @param args the command line arguments
            */
        }

    }//GEN-LAST:event_ResultMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Date.setText("");
        Date2.setText("");
        FinishingHour2.setText("");
        Finishing_Hour.setText("");
        StartingHour2.setText("");
        Starting_Hour.setText("");
        Protocolle.setText("");
        Category.setSelectedIndex(0);
       

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (c1==false&&c2==false){  String Message="Δεν έχετε επιλέξει τύπο μαθήματος";
            JOptionPane.showMessageDialog(null,Message);}

        if(c2==true){
            
            try{
                b1=combobox.getSelectedItem();
                str2=String.valueOf(b1);

                if (!str2.startsWith("'"))
                str2 = "'" + str2;

                if (!str2.endsWith("'"))
                str2 = str2 + "'";

                Class.forName("org.sqlite.JDBC");
                String sourceURL=new String("jdbc:sqlite:driveschool.sqlite");
                java.sql.Connection ConnectiondatabaseConnection = DriverManager.getConnection(sourceURL);
                 Statement statement=ConnectiondatabaseConnection.createStatement();

               
                
               
                

                try{
                    b1=combobox.getSelectedItem();
                    str2=String.valueOf(b1);
                    a1=Category.getSelectedItem();
                    category=String.valueOf(a1);
                    

                    str3=Date2.getText();
                    sd1=new SimpleDateFormat("yyyy-mm-dd");

                    java.util.Date d1 = sd1.parse(str3);
                    java.sql.Date sq1 = new Date(d1.getTime());
                    
                    String sql2="SELECT * FROM theoritical WHERE  `Ωρα_Έναρξης`='"+StartingHour2.getText()+"' AND `Ώρα_Λήξης`='"+FinishingHour2.getText()+"' AND  `Ημερομηνία_Θεωρητικού`='"+Date2.getText()+"' ";
                    ResultSet result2=statement.executeQuery(sql2);
                    if(!result2.isBeforeFirst()){
                    String sql="UPDATE theoritical SET Αριθμός_Πρωτοκόλλου='"+Protocolle.getText()+"',Κατηγορία='"+category+"',Ημερομηνία_Θεωρητικού='"+Date2.getText()+"',Ωρα_Έναρξης='"+StartingHour2.getText()+"',Ώρα_Λήξης='"+FinishingHour2.getText()+"'WHERE Ονοματεπώνυμο='"+str2+"' AND Ημερομηνία_Θεωρητικού='"+res1+"' AND Ωρα_Έναρξης='"+res2+"' AND Ώρα_Λήξης='"+res3+"'";
	        	
	        	 PreparedStatement pst = ConnectiondatabaseConnection.prepareStatement(sql);
                         pst.execute();
                         pst.close();
                    ConnectiondatabaseConnection.close();

                }if(result2.next())
                {
                    String Message="Δεν μπορείτε να εισαγετε μαθημα για την συγκεκριμένη ώρα";
                    JOptionPane.showMessageDialog(null,Message);
                }
                result2.close();
                }
                catch (ParseException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }

            }

            catch(ClassNotFoundException e1){
                System.out.println(e1);
            }
            catch(SQLException e2){
                System.out.println(e2);

            }
        }
        if(c1==true){
            
            try{
                b1=combobox.getSelectedItem();
                str2=String.valueOf(b1);

                if (!str2.startsWith("'"))
                str2 = "'" + str2;

                if (!str2.endsWith("'"))
                str2 = str2 + "'";

                 Class.forName("org.sqlite.JDBC");
                String sourceURL=new String("jdbc:sqlite:driveschool.sqlite");
                java.sql.Connection ConnectiondatabaseConnection = DriverManager.getConnection(sourceURL);
                 

                

                try{
                    a1=Category.getSelectedItem();
                    category=String.valueOf(a1);
                    b1=combobox.getSelectedItem();
                    str2=String.valueOf(b1);

                    str3=Date.getText();
                    sd1=new SimpleDateFormat("yyyy-mm-dd");

                    java.util.Date d1 = sd1.parse(str3);
                    java.sql.Date sq1 = new Date(d1.getTime());
                    
                    Statement statement=ConnectiondatabaseConnection.createStatement();

                String sql2="SELECT * FROM practical WHERE  `Ωρα_Έναρξης`='"+Starting_Hour.getText()+"' AND `Ωρα_Λήξης`='"+Finishing_Hour.getText()+"' AND  `Ημερομηνία_Πρακτικού`='"+Date.getText()+"' ";
                ResultSet result2=statement.executeQuery(sql2);
                
                 if(!result2.isBeforeFirst()){
                    String sql="UPDATE practical SET Αριθμός_Πρωτοκόλλου='"+Protocolle.getText()+"',Κατηγορία='"+category+"',Ημερομηνία_Πρακτικού='"+Date.getText()+"',Ωρα_Έναρξης='"+Starting_Hour.getText()+"',Ωρα_Λήξης='"+Finishing_Hour.getText()+"' WHERE Ονοματεπώνυμο='"+str2+"' AND Ημερομηνία_Πρακτικού='"+res4+"' AND Ωρα_Έναρξης='"+res5+"' AND Ωρα_Λήξης='"+res6+"'";
	        	
	        	 PreparedStatement pst = ConnectiondatabaseConnection.prepareStatement(sql);
                         pst.execute();
                         pst.close();
                    ConnectiondatabaseConnection.close();

                }if(result2.next())
                {
                    String Message="Δεν μπορείτε να εισαγετε μαθημα για την συγκεκριμένη ώρα";
                    JOptionPane.showMessageDialog(null,Message);
                }
                result2.close();
                }
                catch (ParseException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }

            }

            catch(ClassNotFoundException e1){
                System.out.println(e1);
            }
            catch(SQLException e2){
                System.out.println(e2);

            }finally{
        try{
            result.close();
            pst.close();
        }catch(Exception e1){
       System.out.println(e1); 
    }
    }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            b1=combobox.getSelectedItem();
            str1=String.valueOf(b1);
            if (!str1.startsWith("'"))
            str1 = "'" + str1;

            if (!str1.endsWith("'"))
            str1 = str1 + "'";

            Class.forName("org.sqlite.JDBC");
            String sourceURL=new String("jdbc:sqlite:driveschool.sqlite");
            java.sql.Connection ConnectiondatabaseConnection = DriverManager.getConnection(sourceURL);
            Statement statement=ConnectiondatabaseConnection.createStatement();

            String sql="SELECT theoritical.`Ονοματεπώνυμο`,theoritical.`Αριθμός_Πρωτοκόλλου`,theoritical.`Κατηγορία`,theoritical.`Ημερομηνία_Θεωρητικού`,theoritical.`Ωρα_Έναρξης`,theoritical.`Ώρα_Λήξης`,practical.`Ημερομηνία_Πρακτικού`,practical.`Ωρα_Έναρξης`,practical.Ωρα_Λήξης FROM theoritical INNER JOIN practical ON theoritical.`Αριθμός_Πρωτοκόλλου` =practical.`Αριθμός_Πρωτοκόλλου` WHERE theoritical.Ονοματεπώνυμο="+str1;

            ResultSet result=statement.executeQuery(sql);
            Result.setModel(DbUtils.resultSetToTableModel(result));
            result.close();

            // TODO add your handling code here:

        }
        catch(ClassNotFoundException e1){
            System.out.println(e1);
        }
        catch(SQLException e2){
            System.out.println(e2);
            /**
            * @param args the command line arguments
            */
        }finally{
        try{
            result.close();
            pst.close();
        }catch(Exception e1){
       System.out.println(e1); 
    }
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Finishing_HourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Finishing_HourActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Finishing_HourActionPerformed

    private void Starting_HourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Starting_HourActionPerformed
        // TODO add your handling code here:

        Date.setText("");
        Practical.setText("");
        Theoritical.setText("");
        Starting_Hour.setText("");
        Finishing_Hour.setText("");
        Protocolle.setText("");

    }//GEN-LAST:event_Starting_HourActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        try {
            Object a = jComboBox1.getSelectedItem();
            b=String.valueOf(a);
            switch(b){
          case "45 λεπτά":
                c=Starting_Hour.getText();
                DateFormat sdf11 = new SimpleDateFormat("hh:mm:ss");
                java.util.Date date11 = sdf11.parse(c);
                java.util.Calendar now11 = java.util.Calendar.getInstance();
                now11.setTime(date11);
                now11.add(java.util.Calendar.MINUTE,45);
                String newtime=sdf11.format(now11.getTime());
                d=StartingHour2.getText();
                DateFormat sdf44 = new SimpleDateFormat("hh:mm:ss");
                java.util.Date date44 = sdf44.parse(d);
                java.util.Calendar now44 = java.util.Calendar.getInstance();
                now44.setTime(date44);
                now44.add(java.util.Calendar.MINUTE,45);
                String newtime2=sdf44.format(now44.getTime());
                if(c1==true){
                    Finishing_Hour.setText(newtime);
                }else if(c2==true){
                    FinishingHour2.setText(newtime2);
                }

                break;
                case "1:30":
                c11=Starting_Hour.getText();
                DateFormat sdf1 = new SimpleDateFormat("hh:mm:ss");
                java.util.Date date1 = sdf1.parse(c11);
                java.util.Calendar now1 = java.util.Calendar.getInstance();
                now1.setTime(date1);
                now1.add(java.util.Calendar.MINUTE,90);
                String newtime1=sdf1.format(now1.getTime());
                d11=StartingHour2.getText();
                DateFormat sdf4 = new SimpleDateFormat("hh:mm:ss");
                java.util.Date date4 = sdf4.parse(d11);
                java.util.Calendar now4 = java.util.Calendar.getInstance();
                now4.setTime(date4);
                now4.add(java.util.Calendar.MINUTE,90);
                String newtime4=sdf4.format(now4.getTime());
                if(c1==true){
                    Finishing_Hour.setText(newtime1);
                }else if(c2==true){
                    FinishingHour2.setText(newtime4);
                }
                break;
                case "2:15":
                c22=Starting_Hour.getText();
                DateFormat sdf3 = new SimpleDateFormat("hh:mm:ss");
                java.util.Date date3 = sdf3.parse(c22);
                java.util.Calendar now3 = java.util.Calendar.getInstance();
                now3.setTime(date3);
                now3.add(java.util.Calendar.MINUTE,135);
                String newtime3=sdf3.format(now3.getTime());
                d22=StartingHour2.getText();
                DateFormat sdf5 = new SimpleDateFormat("hh:mm:ss");
                java.util.Date date5 = sdf5.parse(d22);
                java.util.Calendar now5 = java.util.Calendar.getInstance();
                now5.setTime(date5);
                now5.add(java.util.Calendar.MINUTE,135);
                String newtime5=sdf5.format(now5.getTime());
                if(c1==true){
                    Finishing_Hour.setText(newtime3);
                }else if(c2==true){
                    FinishingHour2.setText(newtime5);
                }
                break;
            }
        }catch (ParseException ex) {
            Logger.getLogger(LessonsEdit.class.getName()).log(Level.SEVERE, null, ex);
        }
            // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void FinishingHour2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinishingHour2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FinishingHour2ActionPerformed

    private void CategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryActionPerformed
        // TODO add your handling code here:

        Object cat222=Category.getSelectedItem();
        cat22=String.valueOf(cat222);
        

    }//GEN-LAST:event_CategoryActionPerformed

    private void TheoriticalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_TheoriticalItemStateChanged
        // TODO add your handling code here:
        if  (evt.getSource()==Theoritical){
            c1=false;
            c2=true;
        }
    }//GEN-LAST:event_TheoriticalItemStateChanged

    private void PracticalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PracticalItemStateChanged
        // TODO add your handling code here:
        if  (evt.getSource()==Practical){
            c1=true;
            c2=false;
        }
    }//GEN-LAST:event_PracticalItemStateChanged

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        
        
        int selectedOption = JOptionPane.showConfirmDialog(null, "Do you wanna close the window?", "Choose", 
                                  JOptionPane.YES_NO_OPTION); 
        if (selectedOption == JOptionPane.YES_OPTION) 
        {
            setVisible(false);
            dispose();
        }
        if (selectedOption == JOptionPane.NO_OPTION){
    
}
        
    }//GEN-LAST:event_formWindowClosing

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
       
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LessonsEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LessonsEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LessonsEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LessonsEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LessonsEdit().setVisible(true);
            }
        });
    }
    private void setIcon() {
       setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("car.png")));
    }
private void fillcombo(){
    
    try{
        
         Class.forName("org.sqlite.JDBC");
String sourceURL=new String("jdbc:sqlite:driveschool.sqlite");
	java.sql.Connection ConnectiondatabaseConnection = DriverManager.getConnection(sourceURL);
	Statement statement=ConnectiondatabaseConnection.createStatement();

	String sql="SELECT * FROM students; ";
	ResultSet result=statement.executeQuery(sql);
        
        while(result.next()){
            String surname=result.getString("Επώνυμο");
            String name=result.getString("Όνομα");
            String fullname=name +" "+ surname;
            combobox.addItem(fullname);
        }
        
	ConnectiondatabaseConnection.close();
        
        
    }catch(Exception e1){
       System.out.println(e1); 
    }
    ;
}
  private   void displayResults(ResultSet result) throws SQLException{
		
		
		if (result.next()){
                       
			
                       res1=result.getString(4);
                       res2=result.getString(5);
                       res3=result.getString(6);
                       res4=result.getString(7);
                       res5=result.getString(8);
                       res6=result.getString(9);
                       Date2.setText(Table_click2); 
                        StartingHour2.setText(Table_click3);  
                        FinishingHour2.setText(Table_click6);
                        Date.setText(Table_click7); 
                        Starting_Hour.setText(Table_click4);  
                        Finishing_Hour.setText(Table_click5);
                        Protocolle.setText(result.getString(2));
                        cat = result.getString(3);
                       
                        
                      
                           switch (cat){
           case "Αυτοκίνητο":
            Category.setSelectedIndex(1);
            
               break;
               case "Μοτοσυκλέτα ΑΜ":
            Category.setSelectedIndex(2);
            
               break;
                   case "Μοτοσυκλέτα Α1":
            Category.setSelectedIndex(3);
            
               break;
                       case "Μοτοσυκλέτα Α2":
             Category.setSelectedIndex(4);
             
               break;
                           case "Μοτοσυκλέτα Α":
            Category.setSelectedIndex(5);
           
               break;
                               case "Νταλίκα":
            Category.setSelectedIndex(6);
           
               break;
                                   case "Λεωφορείο":
            Category.setSelectedIndex(7);
            
               break;
                                        case "Φορτηγό":
            Category.setSelectedIndex(8);
           
               break;
         }
                  
                        
                       
                  
			
                      
			
			



                } 

               
                
		
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox Category;
    private javax.swing.JTextField Date;
    private javax.swing.JTextField Date2;
    private javax.swing.JTextField FinishingHour2;
    private javax.swing.JTextField Finishing_Hour;
    private javax.swing.JRadioButton Practical;
    private javax.swing.JTextField Protocolle;
    private javax.swing.JTable Result;
    private javax.swing.JTextField StartingHour2;
    private javax.swing.JTextField Starting_Hour;
    private javax.swing.JRadioButton Theoritical;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox combobox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
